GIT

Скачивается sudo apt install git-all

После установки Git нужно настроить. Для своей работы ему важно знать ваше имя и почту. Эти данные подставляются в историю изменений. Только так можно узнать, кто и что сделал в проекте:

# Выполняется из любой директории
git config --global user.name "<имя фамилия>"
git config --global user.email "<ваш емейл>"

SSH — защищенный протокол для удаленного доступа к компьютерам. Через SSH можно выполнять операции в командной строке компьютера, который физически находится в другом месте.

Протокол — это набор соглашений, правил, по которым разные программы могут обмениваться информацией. SSH — это набор правил, который известен и вашему компьютеру, и физически отдаленному компьютеру.

Что значит «защищенный протокол»?

По такому протоколу работают сайты с HTTPS и онлайн-банкинг. При защищенном соединении все данные передаются в зашифрованном виде. Даже если злоумышленник перехватит информацию, он не сможет расшифровать ее.

после создания всех SSH ключей и прочее:

в директории с проектом используем :
git init - Команда git init создает репозиторий — директорию .git, которая содержит все необходимые для работы Git-файлы.

git status - можно посмотреть статус репозитория

Добавление файлов в репозиторий:
Первым шагом нужно подготовить файлы командой:
git add путь/до/файла(или имя файла если он в данной директории)(git add . - Добавляет абсолютно все изменения рабочей директории в индекс) (git add -i - показывает измененные куски файлов и спрашивает, что с ними сделать. С помощью этой команды можно очень точно выбрать то, что должно попасть в коммит, а что нет.)
вторым шагом комитим файл:
git commit -m 'add file_name' - Флаг -m означает message, то есть описание коммита. 
git commit --amend - используется если забыли добавить какой то из файлов в коммит. После команды git add new_file пишет коммит с флажком аменд
git diff - показывает что именно было изменено.
git diff --staged - показывает изменения в файлах подготовленных уже к коммиту.
git log - показывает историю развития проекта (git log -p - с флажком показывает историю + diff) (git log --stat - если вы хотите увидеть сокращенную статистику для каждого коммита) ($ git log --pretty=oneline - Следующей действительно полезной опцией является --pretty. Эта опция меняет формат вывода. Существует несколько встроенных вариантов отображения. Опция oneline выводит каждый коммит в одну строку, что может быть очень удобным если вы просматриваете большое количество коммитов. К тому же, опции short, full и fuller делают вывод приблизительно в том же формате, но с меньшим или большим количеством информации соответственно); Распространенные опции к git log : -p - Показывает патч для каждого коммита.; --stat - Показывает статистику измененных файлов для каждого коммита.; --shortstat - Отображает только строку с количеством изменений/вставок/удалений для команды --stat.; --name-only - Показывает список измененных файлов после информации о коммите.; --name-status - Показывает список файлов, которые добавлены/изменены/удалены.; --abbrev-commit - Показывает только несколько символов SHA-1 чек-суммы вместо всех 40.; --relative-date - Отображает дату в относительном формате (например, «2 weeks ago») вместо стандартного формата даты.; --graph - Отображает ASCII граф с ветвлениями и историей слияний.; --pretty - Показывает коммиты в альтернативном формате. Возможные варианты опций: oneline, short, full, fuller и format (с помощью последней можно указать свой формат).; --oneline - Сокращение для одновременного использования опций --pretty=oneline --abbrev-commit.
git log --graph
##
git log --pretty=format:"%h - %an, %ar : %s" - %H - Хеш коммита; %h - Сокращенный хеш коммита; %T - Хеш дерева; %t - Сокращенный хеш дерева; %P - Хеш родителей; %p - Сокращенный хеш родителей; %an - Имя автора; %ae - Электронная почта автора; %ad - Дата автора (формат даты можно задать опцией --date=option); %ar - Относительная дата автора; %cn - Имя коммитера; %ce - Электронная почта коммитера; %cd - Дата коммитера; %cr - Относительная дата коммитера; %s - Содержание.
##
git log --pretty=format:"%h %s" --graph - Опции oneline и format являются особенно полезными с опцией --graph команды log. С этой опцией вы сможете увидеть небольшой граф в формате ASCII, который показывает текущую ветку и историю слияний
git log --oneline - Показывает сокращенный вывод (что бы переключиться на нужный коммит используется git checkout хэш коммита, git checkout main - вернуться обратно)
git remote add origin git@github.com:github_name/hexlet-git.git - где "git remote add origin" это команда подключает наш репозиторий к git hub.
git branch - узнать свое нахождение
git branch -M main
git push -u origin main - отправляет изменения во вновь созданный репозиторий.
git clone - клонировать репозиторий к себе на компьютер.
git pull --rebase - скачивает из внешнего репозитория новые коммиты и добавляет их в локальный репозиторий.
git restore - восстанавливает по последнему коммиту удаленные файлы.
git rm - удаление файла с уже подготовленной индексацией(т.е. лишает надобности выпонялть команду git add)
git show hash_id - выводит diff по конкретному коммиту  
git blame <путь до файла> - покажет кто менял файл 
git grep ищет - совпадение с указанной строкой во всех файлах проекта. Это очень удобная команда для быстрого анализа из терминала.(git grep -i - флаг i позволяет искать без учета регистра)
git grep Hexlet $(git rev-list --all) - rev-list возвращает список хешей коммитов
git clean -fd - # -f – force, -d – directory. - очистить от внесенных изменений, которые еще не попали в коммит
git restore file_name - отменить изменения для отслеживаемых файлов
git restore --staged - используется, если файл был подготовлен к коммину (заиндексирован), но мы захотели вернуть его
git revert id_commit - команда автоматизирующая откаты
git reset - удаляет сделанный коммит, но делать так не стоит. Если коммит уже улетел в общий репозиторий - то нельзя, это сломает работу. Удалить коммит так можно лишь в том случае, если он сделан на моем компьютере. (git reset --hard HEAD~ (Флаг --hard означает полное удаление; HEAD~ означает "один коммит от последнего коммита"))
git reset HEAD~ - Удаляет последний сделанный комит, но изменения сделанные в нем не пропали. Они находятся в рабочей директории.
git merge

##
СОЗДАНИЕ И ПЕРЕМЕЩЕНИЕ ПО ВЕТКАМ ОТДЕЛЬНЫМ ПУНКТОМ

git branch - отображает список существующих веток и указывает на какой ветке находимся мы знаком *
git branch name_branch - создать новую ветку с именем ..
git checkout name_branch - переключиться на ветку с именем ..
git switch name_branch - тоже переключает на ветку с именем ветки. 
##

##
ИГНОРИРОВАНИЕ ФАЙЛОВ

игнорирование файлов происходит с помощью создания файла в корневой директории проекта:
.gitignore
git rm --cached - если нужно добавит в игнор уже закомиченый файл, то с начала нужно его удалить из отслеживания. Что бы удалить файл из репозитория, но оставить его в локалькой папке - используется флаг кэш. После чего заработают настройки
git add --force - применяется для принудительного коммита игнорируемого файла
git check-ignore --verbose - Если шаблоны .gitignore сложны или разбиты на множество файлов .gitignore, бывает непросто отследить, почему игнорируется определенный файл. Используйте команду git check-ignore с параметром -v (или --verbose), чтобы определить, какой шаблон приводит к игнорированию конкретного файла
##

git stash - команда прячет файлы над которыми были произведены изменения. Не важно, попали они под индекс или нет. Такое используется в тех случаях, когда нужно срочно внести изменения в изначальный код и "отложить" вашу текущую работу
git stash pop - возвращает спрятанные файлы 
git stash list - посмотреть список припрятанных изменений

##
СОЗДАНИЕ ПСЕВДОНИМОВ

Создание псевдонимов укорачивает использование команд, мы может применить это к популярным для нас командам, на пример: 
git config --global alias.ci commit - сделает вызов команды "git commit" по упрощенному варианту "git ci"
##
